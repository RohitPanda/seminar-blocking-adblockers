import logging
import argparse
import utils

class ArgumentParser:
    def __init__(self):
        args = self.__parse_args()
        root = logging.getLogger()
        if root.handlers:
            for handler in root.handlers:
                root.removeHandler(handler)
        if args.debug:
            logging.basicConfig(level=logging.DEBUG, format='%(asctime)s %(levelname)-8s %(filename)s:%(lineno)-4d: %(message)s', datefmt='%m-%d %H:%M')
            logging.info("Debug level logging enabled")
        else:
            logging.basicConfig(level=logging.INFO, format='%(asctime)s %(levelname)-8s %(filename)s:%(lineno)-4d: %(message)s', datefmt='%m-%d %H:%M')
        self.input, self.output, self.threshold, self.filemap = args.input, args.output, float(args.threshold), args.filemap
        try:
            self.plot = args.plot
        except:
            self.plot = False
        utils.make_folder(self.output)
        try:
            self.cliques = args.cliques
            self.clique_size = int(args.cs)
        except Exception:
            self.cliques = False
            self.clique_size = 0
        self.__print_params()
        self.params = self.get_params()

    def __parse_args(print_help=False):
        parser = argparse.ArgumentParser()
        parser.add_argument('--debug', '-d', help='Enable DEBUG level logging', action='store_true')
        parser.add_argument('--cliques', '-c', help='Compute cliques', action='store_true')
        parser.add_argument('--cliquesize', '-cs', help='Minimum clique size', dest='cs')
        parser.add_argument('--threshold', '-t', help='Similarity threshold for two nodes to share an edge (0 to 1)', dest='threshold', required=True)
        parser.add_argument('--input_folder', '-i', help='Folder containing numpy adjacency matrices for graph generation', dest='input', required=True)
        parser.add_argument('--filemap', '-f', help='File containing a mapping of filenames and graph node ids', dest='filemap', required=True)
        parser.add_argument('--output_folder', '-o', help='Folder that will store the output generated by this program', dest='output', required=True)
        parser.add_argument('--plot', '-p', help='Produce plots of graphs generated by this analysis script', action='store_true')
        parsed_args = parser.parse_args()
        return parsed_args

    def get_params(self):
        self.params = {"input": self.input, "output": self.output, "cliques": self.cliques, "threshold": self.threshold, "filemap": self.filemap, "clique-size": self.clique_size, "plot": self.plot}
        return self.params

    def __print_params(self):
        logging.info("Source Matrix: %s (Map: %s) | Destination folder: %s | Find Maximal Cliques: %s (%d) | Threshold: %f | Plot: %s" % (self.input, self.filemap, self.output, self.cliques, self.clique_size, self.threshold, self.plot))
