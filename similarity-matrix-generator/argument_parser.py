import logging
import argparse
import utils
import sys


class ArgumentParser:
    def __init__(self):
        args = self.__parse_args()
        root = logging.getLogger()
        if root.handlers:
            for handler in root.handlers:
                root.removeHandler(handler)
        self.stats, self.input, self.output, self.method, self.ratio, self.t_workers, self.w_id = args.stats, args.input, args.output, args.method, float(args.ratio), int(args.workers), int(args.wid)
        self.blacklist = args.blacklist
        try:
            self.preload = args.load
        except Exception:
            self.preload = None
        try:
            self.inter = args.intersite
        except Exception:
            self.inter = False
        if args.debug:
            logging.basicConfig(filename='debuglog.w'+str(self.w_id), level=logging.DEBUG, format='%(asctime)s %(levelname)-8s %(filename)s:%(lineno)-4d: %(message)s', datefmt='%m-%d %H:%M')
            logging.info("Debug level logging enabled")
        else:
            logging.basicConfig(level=logging.INFO, format='%(asctime)s %(levelname)-8s %(filename)s:%(lineno)-4d: %(message)s', datefmt='%m-%d %H:%M')
        utils.make_folder(self.output)
        self.__print_params()
        self.params = self.get_params()

    def __parse_args(print_help=False):
        parser = argparse.ArgumentParser()
        parser.add_argument('--debug', '-d', help='Enable DEBUG level logging', action='store_true')
        parser.add_argument('--input_folder', '-i', help='Folder (root) containing input files', dest='input', required=True)
        parser.add_argument('--output_folder', '-o', help='Folder that will store the output matrix', dest='output', required=True)
        parser.add_argument('--method', '-m', help='Similarity score method', dest='method', required=True)
        parser.add_argument('--load-matrix', '-l', help='Load an already initialized similarity matrix', dest='load')
        parser.add_argument('--min_line_ratio', '-r', help='Minimum ratio of chars between 2 files for them to be compared with each other (always < 1)', dest='ratio', required=True)
        parser.add_argument('--total-workers', '-tw', help='Total number of processes that will be working to populate this matrix', dest='workers', required=True)
        parser.add_argument('--worker-id', '-id', help='What worker is this? (number from 1 to Total workers)', dest='wid', required=True)
        parser.add_argument('--intersite', '-is', help='Pass this flag to set avoid all comparisons between scripts from the same site', action='store_true')
        parser.add_argument('--statfile', '-s', help='File containing data about scripts and domains, generated by the extractor', dest='stats', required=True)
        parser.add_argument('--blacklist', '-b', help='Blacklist containing domains that are definitely not distributing adblock scripts', dest='blacklist', required=True)
        parsed_args = parser.parse_args()
        return parsed_args

    def get_params(self):
        self.params = {"stats": self.stats, "input": self.input, "output": self.output, "method": self.method, "ratio": self.ratio, "preload": self.preload, "total-workers": self.t_workers, "w-id": self.w_id, "inter": self.inter, "blacklist": self.blacklist}
        return self.params

    def __print_params(self):
        logging.info("Source folder: %s (Stats: %s) | Destination folder: %s | Method: %s (min ratio: %f) | Preloaded matrix: %s | Worker ID: %d (Total: %d) | Inter-site comparisons only: %s | Blacklist: %s" % (self.stats, self.input, self.output, self.method, self.ratio, self.preload, self.w_id, self.t_workers, self.inter, self.blacklist))
